/**
 * 16-bit Hack ALU from the book "The Elements of Computing Systems"
 * by Nisan and Schocken, MIT Press.
 * 
 * The ALU computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * 
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 * 
 * Implementation: the ALU logic manipulates the x and y inputs
 * and operates on the resulting values, as follows:
 * if (zx == 1) set x = 0        // 16-bit constant
 * if (nx == 1) set x = !x       // bitwise not
 * if (zy == 1) set y = 0        // 16-bit constant
 * if (ny == 1) set y = !y       // bitwise not
 * if (f == 1)  set out = x + y  // integer 2's complement addition
 * if (f == 0)  set out = x & y  // bitwise and
 * if (no == 1) set out = !out   // bitwise not
 * if (out == 0) set zr = 1
 * if (out < 0) set ng = 1
 * if overflow detected set v = 1
 * 
 * Author: Naga Kandasamy
 * Date created: July 10, 2020
 * Date modified: December 3, 2021
 * 
 * Student name: Justin Ngo
 * Date modified: 12/7/2022
*/

CHIP ALU {
    IN  
        x[16], y[16],       // 16-bit inputs        
        zx,                 // zero the x input?
        nx,                 // negate the x input?
        zy,                 // zero the y input?
        ny,                 // negate the y input?
        f,                  // compute out = x + y (if 1) or x & y (if 0)
        no;                 // negate the out output?

    OUT 
        out[16],            // 16-bit output
        zr,                 // 1 if (out == 0), 0 otherwise
        ng,                 // 1 if (out < 0),  0 otherwise
        v;                  // 1 if overflow detected, 0 otherwise

    PARTS:
	Mux16(a=x, b=false, sel=zx, out=x1);
    Not16(in=x1, out=notx1);
    Mux16(a=x1, b=notx1, sel=nx, out=x2);
    
    Mux16(a=y, b=false, sel=zy, out=y1);
    Not16(in=y1, out=noty1);
    Mux16(a=y1, b=noty1, sel=ny, out=y2);
    
    // ALU operation
    And16(a=x2, b=y2, out=x2andy2);
    Add16(x=x2, y=y2, z=x2plusy2, v=v);
    Mux16(a=x2andy2, b=x2plusy2, sel=f, out=aluout);
    
    // Post-set ALU output
    Not16(in=aluout, out=notaluout);
    Mux16(a=aluout, b=notaluout, sel=no, out=out, out[0..7]=firsteight, out[8..15]=lasteight, out[15] = ng);
    
    // Zero output
    Or8Way(in=firsteight, out=temp1);
    Or8Way(in=lasteight, out=temp2);
    Or(a=temp1, b=temp2, out=temp3);
    Not(in=temp3, out=zr);
}